// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'd': // Prefix: "developments/search/filter"

				if l := len("developments/search/filter"); len(elem) >= l && elem[0:l] == "developments/search/filter" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "POST":
						s.handleDevelopmentSearchRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "POST")
					}

					return
				}

			case 'i': // Prefix: "infrastructure/"

				if l := len("infrastructure/"); len(elem) >= l && elem[0:l] == "infrastructure/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'h': // Prefix: "heatmap"

					if l := len("heatmap"); len(elem) >= l && elem[0:l] == "heatmap" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleGenerateInfrastructureHeatmapRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				case 'r': // Prefix: "radius"

					if l := len("radius"); len(elem) >= l && elem[0:l] == "radius" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleInfrastructureRadiusBoardRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

				}

			case 'l': // Prefix: "location/list"

				if l := len("location/list"); len(elem) >= l && elem[0:l] == "location/list" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleLocationListRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

			case 'p': // Prefix: "profile/login"

				if l := len("profile/login"); len(elem) >= l && elem[0:l] == "profile/login" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "POST":
						s.handleUserLoginRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "POST")
					}

					return
				}

			case 'r': // Prefix: "routes/build/points"

				if l := len("routes/build/points"); len(elem) >= l && elem[0:l] == "routes/build/points" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleBuildRoutesByPointsRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

			case 's': // Prefix: "selection/"

				if l := len("selection/"); len(elem) >= l && elem[0:l] == "selection/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'c': // Prefix: "create"

					if l := len("create"); len(elem) >= l && elem[0:l] == "create" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleCreateSelectionRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				case 'd': // Prefix: "delete"

					if l := len("delete"); len(elem) >= l && elem[0:l] == "delete" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleDeleteSelectionRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				case 'e': // Prefix: "edit"

					if l := len("edit"); len(elem) >= l && elem[0:l] == "edit" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleEditSelectionRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				case 'f': // Prefix: "favorite"

					if l := len("favorite"); len(elem) >= l && elem[0:l] == "favorite" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleAddToFavoriteSelectionRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				case 'l': // Prefix: "list"

					if l := len("list"); len(elem) >= l && elem[0:l] == "list" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleSelectionListRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

				}

			}

		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [0]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'd': // Prefix: "developments/search/filter"

				if l := len("developments/search/filter"); len(elem) >= l && elem[0:l] == "developments/search/filter" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "POST":
						r.name = DevelopmentSearchOperation
						r.summary = ""
						r.operationID = "developmentSearch"
						r.pathPattern = "/developments/search/filter"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

			case 'i': // Prefix: "infrastructure/"

				if l := len("infrastructure/"); len(elem) >= l && elem[0:l] == "infrastructure/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'h': // Prefix: "heatmap"

					if l := len("heatmap"); len(elem) >= l && elem[0:l] == "heatmap" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = GenerateInfrastructureHeatmapOperation
							r.summary = "Generate heatmap of infrastructure"
							r.operationID = "generateInfrastructureHeatmap"
							r.pathPattern = "/infrastructure/heatmap"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 'r': // Prefix: "radius"

					if l := len("radius"); len(elem) >= l && elem[0:l] == "radius" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = InfrastructureRadiusBoardOperation
							r.summary = "Search for infrastructure around the selected residential complex"
							r.operationID = "infrastructureRadiusBoard"
							r.pathPattern = "/infrastructure/radius"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				}

			case 'l': // Prefix: "location/list"

				if l := len("location/list"); len(elem) >= l && elem[0:l] == "location/list" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "GET":
						r.name = LocationListOperation
						r.summary = "Get location list"
						r.operationID = "locationList"
						r.pathPattern = "/location/list"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

			case 'p': // Prefix: "profile/login"

				if l := len("profile/login"); len(elem) >= l && elem[0:l] == "profile/login" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "POST":
						r.name = UserLoginOperation
						r.summary = "User login"
						r.operationID = "userLogin"
						r.pathPattern = "/profile/login"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

			case 'r': // Prefix: "routes/build/points"

				if l := len("routes/build/points"); len(elem) >= l && elem[0:l] == "routes/build/points" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "GET":
						r.name = BuildRoutesByPointsOperation
						r.summary = "Build a route between points"
						r.operationID = "buildRoutesByPoints"
						r.pathPattern = "/routes/build/points"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

			case 's': // Prefix: "selection/"

				if l := len("selection/"); len(elem) >= l && elem[0:l] == "selection/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'c': // Prefix: "create"

					if l := len("create"); len(elem) >= l && elem[0:l] == "create" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = CreateSelectionOperation
							r.summary = "Create a new selection"
							r.operationID = "createSelection"
							r.pathPattern = "/selection/create"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 'd': // Prefix: "delete"

					if l := len("delete"); len(elem) >= l && elem[0:l] == "delete" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = DeleteSelectionOperation
							r.summary = "Delete a selection"
							r.operationID = "deleteSelection"
							r.pathPattern = "/selection/delete"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 'e': // Prefix: "edit"

					if l := len("edit"); len(elem) >= l && elem[0:l] == "edit" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = EditSelectionOperation
							r.summary = "Edit new selection"
							r.operationID = "editSelection"
							r.pathPattern = "/selection/edit"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 'f': // Prefix: "favorite"

					if l := len("favorite"); len(elem) >= l && elem[0:l] == "favorite" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = AddToFavoriteSelectionOperation
							r.summary = "Add/remove a development to/from favorites"
							r.operationID = "addToFavoriteSelection"
							r.pathPattern = "/selection/favorite"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 'l': // Prefix: "list"

					if l := len("list"); len(elem) >= l && elem[0:l] == "list" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = SelectionListOperation
							r.summary = "Get selection list"
							r.operationID = "selectionList"
							r.pathPattern = "/selection/list"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				}

			}

		}
	}
	return r, false
}
