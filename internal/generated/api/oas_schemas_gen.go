// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

type BuildRoutesByPointsBadRequest Error

func (*BuildRoutesByPointsBadRequest) buildRoutesByPointsRes() {}

type BuildRoutesByPointsInternalServerError Error

func (*BuildRoutesByPointsInternalServerError) buildRoutesByPointsRes() {}

type BuildRoutesByPointsOK map[string]jx.Raw

func (s *BuildRoutesByPointsOK) init() BuildRoutesByPointsOK {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

func (*BuildRoutesByPointsOK) buildRoutesByPointsRes() {}

type DevelopmentSearchBoardBadRequest Error

func (*DevelopmentSearchBoardBadRequest) developmentSearchBoardRes() {}

type DevelopmentSearchBoardInternalServerError Error

func (*DevelopmentSearchBoardInternalServerError) developmentSearchBoardRes() {}

type DevelopmentSearchBoardOKApplicationJSON []DevelopmentSearchBoardOKItem

func (*DevelopmentSearchBoardOKApplicationJSON) developmentSearchBoardRes() {}

type DevelopmentSearchBoardOKItem struct {
	ID     int                                   `json:"id"`
	Name   string                                `json:"name"`
	Coords OptDevelopmentSearchBoardOKItemCoords `json:"coords"`
}

// GetID returns the value of ID.
func (s *DevelopmentSearchBoardOKItem) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *DevelopmentSearchBoardOKItem) GetName() string {
	return s.Name
}

// GetCoords returns the value of Coords.
func (s *DevelopmentSearchBoardOKItem) GetCoords() OptDevelopmentSearchBoardOKItemCoords {
	return s.Coords
}

// SetID sets the value of ID.
func (s *DevelopmentSearchBoardOKItem) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *DevelopmentSearchBoardOKItem) SetName(val string) {
	s.Name = val
}

// SetCoords sets the value of Coords.
func (s *DevelopmentSearchBoardOKItem) SetCoords(val OptDevelopmentSearchBoardOKItemCoords) {
	s.Coords = val
}

type DevelopmentSearchBoardOKItemCoords struct {
	Lon float64 `json:"lon"`
	Lat float64 `json:"lat"`
}

// GetLon returns the value of Lon.
func (s *DevelopmentSearchBoardOKItemCoords) GetLon() float64 {
	return s.Lon
}

// GetLat returns the value of Lat.
func (s *DevelopmentSearchBoardOKItemCoords) GetLat() float64 {
	return s.Lat
}

// SetLon sets the value of Lon.
func (s *DevelopmentSearchBoardOKItemCoords) SetLon(val float64) {
	s.Lon = val
}

// SetLat sets the value of Lat.
func (s *DevelopmentSearchBoardOKItemCoords) SetLat(val float64) {
	s.Lat = val
}

// Ref: #/components/schemas/error
type Error struct {
	Status OptErrorStatus `json:"status"`
	// Ошибка.
	Error OptErrorError `json:"error"`
}

// GetStatus returns the value of Status.
func (s *Error) GetStatus() OptErrorStatus {
	return s.Status
}

// GetError returns the value of Error.
func (s *Error) GetError() OptErrorError {
	return s.Error
}

// SetStatus sets the value of Status.
func (s *Error) SetStatus(val OptErrorStatus) {
	s.Status = val
}

// SetError sets the value of Error.
func (s *Error) SetError(val OptErrorError) {
	s.Error = val
}

// Ошибка.
type ErrorError struct {
	// Код ошибки.
	Code OptInt `json:"code"`
	// Сообщение об ошибке.
	Message OptString `json:"message"`
}

// GetCode returns the value of Code.
func (s *ErrorError) GetCode() OptInt {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ErrorError) GetMessage() OptString {
	return s.Message
}

// SetCode sets the value of Code.
func (s *ErrorError) SetCode(val OptInt) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ErrorError) SetMessage(val OptString) {
	s.Message = val
}

type ErrorStatus string

const (
	ErrorStatusNotFound      ErrorStatus = "not-found"
	ErrorStatusBadRequest    ErrorStatus = "bad-request"
	ErrorStatusInternalError ErrorStatus = "internal-error"
	ErrorStatusUnauthorized  ErrorStatus = "unauthorized"
)

// AllValues returns all ErrorStatus values.
func (ErrorStatus) AllValues() []ErrorStatus {
	return []ErrorStatus{
		ErrorStatusNotFound,
		ErrorStatusBadRequest,
		ErrorStatusInternalError,
		ErrorStatusUnauthorized,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ErrorStatus) MarshalText() ([]byte, error) {
	switch s {
	case ErrorStatusNotFound:
		return []byte(s), nil
	case ErrorStatusBadRequest:
		return []byte(s), nil
	case ErrorStatusInternalError:
		return []byte(s), nil
	case ErrorStatusUnauthorized:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ErrorStatus) UnmarshalText(data []byte) error {
	switch ErrorStatus(data) {
	case ErrorStatusNotFound:
		*s = ErrorStatusNotFound
		return nil
	case ErrorStatusBadRequest:
		*s = ErrorStatusBadRequest
		return nil
	case ErrorStatusInternalError:
		*s = ErrorStatusInternalError
		return nil
	case ErrorStatusUnauthorized:
		*s = ErrorStatusUnauthorized
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ObjectsFindNearestInfrastructureBadRequest Error

func (*ObjectsFindNearestInfrastructureBadRequest) objectsFindNearestInfrastructureRes() {}

type ObjectsFindNearestInfrastructureInternalServerError Error

func (*ObjectsFindNearestInfrastructureInternalServerError) objectsFindNearestInfrastructureRes() {}

type ObjectsFindNearestInfrastructureOK map[string]jx.Raw

func (s *ObjectsFindNearestInfrastructureOK) init() ObjectsFindNearestInfrastructureOK {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

func (*ObjectsFindNearestInfrastructureOK) objectsFindNearestInfrastructureRes() {}

type ObjectsFindNearestInfrastructureObjectTypesItem string

const (
	ObjectsFindNearestInfrastructureObjectTypesItemHospital     ObjectsFindNearestInfrastructureObjectTypesItem = "hospital"
	ObjectsFindNearestInfrastructureObjectTypesItemSport        ObjectsFindNearestInfrastructureObjectTypesItem = "sport"
	ObjectsFindNearestInfrastructureObjectTypesItemShops        ObjectsFindNearestInfrastructureObjectTypesItem = "shops"
	ObjectsFindNearestInfrastructureObjectTypesItemKindergarten ObjectsFindNearestInfrastructureObjectTypesItem = "kindergarten"
	ObjectsFindNearestInfrastructureObjectTypesItemBusStop      ObjectsFindNearestInfrastructureObjectTypesItem = "busStop"
)

// AllValues returns all ObjectsFindNearestInfrastructureObjectTypesItem values.
func (ObjectsFindNearestInfrastructureObjectTypesItem) AllValues() []ObjectsFindNearestInfrastructureObjectTypesItem {
	return []ObjectsFindNearestInfrastructureObjectTypesItem{
		ObjectsFindNearestInfrastructureObjectTypesItemHospital,
		ObjectsFindNearestInfrastructureObjectTypesItemSport,
		ObjectsFindNearestInfrastructureObjectTypesItemShops,
		ObjectsFindNearestInfrastructureObjectTypesItemKindergarten,
		ObjectsFindNearestInfrastructureObjectTypesItemBusStop,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ObjectsFindNearestInfrastructureObjectTypesItem) MarshalText() ([]byte, error) {
	switch s {
	case ObjectsFindNearestInfrastructureObjectTypesItemHospital:
		return []byte(s), nil
	case ObjectsFindNearestInfrastructureObjectTypesItemSport:
		return []byte(s), nil
	case ObjectsFindNearestInfrastructureObjectTypesItemShops:
		return []byte(s), nil
	case ObjectsFindNearestInfrastructureObjectTypesItemKindergarten:
		return []byte(s), nil
	case ObjectsFindNearestInfrastructureObjectTypesItemBusStop:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ObjectsFindNearestInfrastructureObjectTypesItem) UnmarshalText(data []byte) error {
	switch ObjectsFindNearestInfrastructureObjectTypesItem(data) {
	case ObjectsFindNearestInfrastructureObjectTypesItemHospital:
		*s = ObjectsFindNearestInfrastructureObjectTypesItemHospital
		return nil
	case ObjectsFindNearestInfrastructureObjectTypesItemSport:
		*s = ObjectsFindNearestInfrastructureObjectTypesItemSport
		return nil
	case ObjectsFindNearestInfrastructureObjectTypesItemShops:
		*s = ObjectsFindNearestInfrastructureObjectTypesItemShops
		return nil
	case ObjectsFindNearestInfrastructureObjectTypesItemKindergarten:
		*s = ObjectsFindNearestInfrastructureObjectTypesItemKindergarten
		return nil
	case ObjectsFindNearestInfrastructureObjectTypesItemBusStop:
		*s = ObjectsFindNearestInfrastructureObjectTypesItemBusStop
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// NewOptDevelopmentSearchBoardOKItemCoords returns new OptDevelopmentSearchBoardOKItemCoords with value set to v.
func NewOptDevelopmentSearchBoardOKItemCoords(v DevelopmentSearchBoardOKItemCoords) OptDevelopmentSearchBoardOKItemCoords {
	return OptDevelopmentSearchBoardOKItemCoords{
		Value: v,
		Set:   true,
	}
}

// OptDevelopmentSearchBoardOKItemCoords is optional DevelopmentSearchBoardOKItemCoords.
type OptDevelopmentSearchBoardOKItemCoords struct {
	Value DevelopmentSearchBoardOKItemCoords
	Set   bool
}

// IsSet returns true if OptDevelopmentSearchBoardOKItemCoords was set.
func (o OptDevelopmentSearchBoardOKItemCoords) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDevelopmentSearchBoardOKItemCoords) Reset() {
	var v DevelopmentSearchBoardOKItemCoords
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDevelopmentSearchBoardOKItemCoords) SetTo(v DevelopmentSearchBoardOKItemCoords) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDevelopmentSearchBoardOKItemCoords) Get() (v DevelopmentSearchBoardOKItemCoords, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDevelopmentSearchBoardOKItemCoords) Or(d DevelopmentSearchBoardOKItemCoords) DevelopmentSearchBoardOKItemCoords {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptErrorError returns new OptErrorError with value set to v.
func NewOptErrorError(v ErrorError) OptErrorError {
	return OptErrorError{
		Value: v,
		Set:   true,
	}
}

// OptErrorError is optional ErrorError.
type OptErrorError struct {
	Value ErrorError
	Set   bool
}

// IsSet returns true if OptErrorError was set.
func (o OptErrorError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptErrorError) Reset() {
	var v ErrorError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptErrorError) SetTo(v ErrorError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptErrorError) Get() (v ErrorError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptErrorError) Or(d ErrorError) ErrorError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptErrorStatus returns new OptErrorStatus with value set to v.
func NewOptErrorStatus(v ErrorStatus) OptErrorStatus {
	return OptErrorStatus{
		Value: v,
		Set:   true,
	}
}

// OptErrorStatus is optional ErrorStatus.
type OptErrorStatus struct {
	Value ErrorStatus
	Set   bool
}

// IsSet returns true if OptErrorStatus was set.
func (o OptErrorStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptErrorStatus) Reset() {
	var v ErrorStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptErrorStatus) SetTo(v ErrorStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptErrorStatus) Get() (v ErrorStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptErrorStatus) Or(d ErrorStatus) ErrorStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}
