// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s *AddToFavoriteSelectionBadRequest) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *AddToFavoriteSelectionInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *AddToFavoriteSelectionUnauthorized) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *BuildRoutesByPointsBadRequest) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *BuildRoutesByPointsInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *BuildRoutesByPointsNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *CreateSelectionBadRequest) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *CreateSelectionInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *CreateSelectionReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Form.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "form",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *CreateSelectionUnauthorized) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteSelectionBadRequest) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteSelectionInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteSelectionUnauthorized) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *Development) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Coords.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "coords",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *DevelopmentCoords) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.Lat)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "lat",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.Lon)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "lon",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *DevelopmentSearchBadRequest) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DevelopmentSearchInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DevelopmentSearchOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Developments == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Developments {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "developments",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *DevelopmentSearchReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Board.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "board",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *DevelopmentSearchReqBoard) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.TopLeftLon)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "topLeftLon",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.TopLeftLat)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "topLeftLat",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.BottomRightLon)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bottomRightLon",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.BottomRightLat)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bottomRightLat",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *EditSelectionBadRequest) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *EditSelectionInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *EditSelectionNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *EditSelectionReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Form.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "form",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *EditSelectionUnauthorized) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *Error) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ErrorStatus) Validate() error {
	switch s {
	case "not-found":
		return nil
	case "bad-request":
		return nil
	case "internal-error":
		return nil
	case "unauthorized":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GenerateInfrastructureHeatmapBadRequest) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GenerateInfrastructureHeatmapInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s GenerateInfrastructureHeatmapOKApplicationJSON) Validate() error {
	alias := ([]GenerateInfrastructureHeatmapOKItem)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range alias {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GenerateInfrastructureHeatmapOKItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.TotalWeight)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "total_weight",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GenerateInfrastructureHeatmapReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Bbox.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bbox",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GenerateInfrastructureHeatmapReqBbox) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.TopLeftLon)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "topLeftLon",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.TopLeftLat)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "topLeftLat",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.BottomRightLon)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bottomRightLon",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.BottomRightLat)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bottomRightLat",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *InfrastructureRadiusBoardBadRequest) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *InfrastructureRadiusBoardInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *InfrastructureRadiusBoardNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s InfrastructureRadiusBoardOKApplicationJSON) Validate() error {
	alias := ([]InfrastructureRadiusBoardOKItem)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range alias {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *InfrastructureRadiusBoardOKItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Coords.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "coords",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *InfrastructureRadiusBoardOKItemCoords) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.Lon)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "lon",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.Lat)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "lat",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *LocationListBadRequest) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *LocationListInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *LocationListOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Locations == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locations",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *LocationListUnauthorized) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *Selection) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Form.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "form",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SelectionByIdBadRequest) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *SelectionByIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *SelectionByIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *SelectionByIdOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Selection.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "selection",
			Error: err,
		})
	}
	if err := func() error {
		if s.FavoriteDevelopments == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.FavoriteDevelopments {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "favoriteDevelopments",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SelectionByIdOKFavoriteDevelopmentsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Development.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "development",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SelectionByIdUnauthorized) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *SelectionForm) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Int{
			MinSet:        true,
			Min:           0,
			MaxSet:        true,
			Max:           10,
			MinExclusive:  false,
			MaxExclusive:  false,
			MultipleOfSet: false,
			MultipleOf:    0,
		}).Validate(int64(s.WHospital)); err != nil {
			return errors.Wrap(err, "int")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "w_hospital",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Int{
			MinSet:        true,
			Min:           0,
			MaxSet:        true,
			Max:           10,
			MinExclusive:  false,
			MaxExclusive:  false,
			MultipleOfSet: false,
			MultipleOf:    0,
		}).Validate(int64(s.WSport)); err != nil {
			return errors.Wrap(err, "int")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "w_sport",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Int{
			MinSet:        true,
			Min:           0,
			MaxSet:        true,
			Max:           10,
			MinExclusive:  false,
			MaxExclusive:  false,
			MultipleOfSet: false,
			MultipleOf:    0,
		}).Validate(int64(s.WShop)); err != nil {
			return errors.Wrap(err, "int")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "w_shop",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Int{
			MinSet:        true,
			Min:           0,
			MaxSet:        true,
			Max:           10,
			MinExclusive:  false,
			MaxExclusive:  false,
			MultipleOfSet: false,
			MultipleOf:    0,
		}).Validate(int64(s.WKindergarten)); err != nil {
			return errors.Wrap(err, "int")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "w_kindergarten",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Int{
			MinSet:        true,
			Min:           0,
			MaxSet:        true,
			Max:           10,
			MinExclusive:  false,
			MaxExclusive:  false,
			MultipleOfSet: false,
			MultipleOf:    0,
		}).Validate(int64(s.WBusStop)); err != nil {
			return errors.Wrap(err, "int")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "w_bus_stop",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Int{
			MinSet:        true,
			Min:           0,
			MaxSet:        true,
			Max:           10,
			MinExclusive:  false,
			MaxExclusive:  false,
			MultipleOfSet: false,
			MultipleOf:    0,
		}).Validate(int64(s.WSchool)); err != nil {
			return errors.Wrap(err, "int")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "w_school",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SelectionListBadRequest) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *SelectionListInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *SelectionListOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Selections == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Selections {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "selections",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SelectionListUnauthorized) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *UserLoginBadRequest) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *UserLoginInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *UserLoginReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        true,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Email)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "email",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UserLoginUnauthorized) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}
