openapi: 3.0.3
servers:
  - url: 'https://127.0.0.1:8080'
info:
  version: 1.0.0
  title: Real estate insight
paths:
  /infrastructure/radius:
    get:
      summary: Search for infrastructure around the selected residential complex
      description: Search for infrastructure around the selected residential complex
      operationId: infrastructureRadiusBoard
      parameters:
        - name: developmentId
          in: query
          required: true
          schema:
            type: integer
            minimum: 0
        - name: radius
          in: query
          required: true
          schema:
            type: integer
            minimum: 1000
            maximum: 10000
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - id
                    - objType
                    - coords
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    objType:
                      type: string
                    coords:
                      type: object
                      required:
                        - lat
                        - lon
                      properties:
                        lon:
                          type: number
                        lat:
                          type: number
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /infrastructure/heatmap:
    post:
      summary: Generate heatmap of infrastructure
      description: Returns a grid-based heatmap for infrastructure objects based on type weights within a selected bounding box
      operationId: generateInfrastructureHeatmap
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - bbox
              properties:
                bbox:
                  type: object
                  required:
                    - topLeftLon
                    - topLeftLat
                    - bottomRightLon
                    - bottomRightLat
                  properties:
                    topLeftLon:
                      type: number
                    topLeftLat:
                      type: number
                    bottomRightLon:
                      type: number
                    bottomRightLat:
                      type: number
      responses:
        200:
          description: Successful heatmap generation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - geometry
                    - total_weight
                  properties:
                    geometry:
                      type: object
                      additionalProperties: true # GeoJson
                    total_weight:
                      type: number
                      description: Суммарный вес инфраструктуры в ячейке
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /developments/search/filter:
    post:
      operationId: developmentSearch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                searchQuery:
                  type: string
                pagination:
                  type: object
                  required:
                    - page
                    - perPage
                  properties:
                    page:
                      type: integer
                      default: 1
                    perPage:
                      type: integer
                      default: 10
                      maximum: 100
                      minimum: 1
                board:
                  type: object
                  required:
                    - topLeftLon
                    - topLeftLat
                    - bottomRightLon
                    - bottomRightLat
                  properties:
                    topLeftLon:
                      type: number
                    topLeftLat:
                      type: number
                    bottomRightLon:
                      type: number
                    bottomRightLat:
                      type: number
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - developments
                  - meta
                properties:
                  developments:
                    type: array
                    items:
                      $ref: "#/components/schemas/development"
                  meta:
                    type: object
                    required:
                      - total
                    properties:
                      total:
                        type: integer
                        format: int64
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /routes/build/points:
    get:
      summary: Build a route between points
      description: Build a route between points
      operationId: buildRoutesByPoints
      parameters:
        - name: developmentId
          in: query
          required: true
          schema:
            type: integer
            format: int64
        - name: osmId
          required: true
          in: query
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true # GeoJson
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /selection/list:
    get:
      summary: Get selection list
      description: Get selection list
      operationId: selectionList
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - selections
                properties:
                  selections:
                    type: array
                    items:
                      type: object
                      required:
                        - selectionId
                        - name
                        - comment
                        - createdAt
                        - updatedAt
                        - form
                      properties:
                        selectionId:
                          type: string
                          format: uuid
                        name:
                          type: string
                        comment:
                          type: string
                        createdAt:
                          type: string
                          format: date-time
                        updatedAt:
                          type: string
                          format: date-time
                        form:
                          $ref: "#/components/schemas/selectionForm"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /selection/create:
    post:
      summary: Create a new selection
      description: Create a new selection for the user with name, comment, and form.
      operationId: createSelection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - comment
                - form
              properties:
                name:
                  type: string
                comment:
                  type: string
                form:
                  $ref: "#/components/schemas/selectionForm"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - selectionId
                properties:
                  selectionId:
                    type: string
                    format: uuid
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /selection/delete:
    post:
      summary: Delete a selection
      description: Delete a selection for the user by selection ID.
      operationId: deleteSelection
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                properties:
                  status:
                    type: boolean
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /selection/edit:
    post:
      summary: Edit new selection
      description: Edit new selection
      operationId: editSelection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - selectionId
                - name
                - comment
                - form
              properties:
                selectionId:
                  type: string
                  format: uuid
                name:
                  type: string
                comment:
                  type: string
                form:
                  $ref: "#/components/schemas/selectionForm"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                properties:
                  status:
                    type: boolean
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        404:
          description: NotFount
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /selection/favorite:
    post:
      summary: Add/remove a development to/from favorites
      description: Add or remove a development to/from the selected user's favorite selection.
      operationId: addToFavoriteSelection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - selection_id
                - development_id
              properties:
                selection_id:
                  type: string
                  format: uuid
                development_id:
                  type: integer
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                properties:
                  status:
                    type: boolean
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /profile/login:
    post:
      summary: User login
      description: Authenticate the user using email and password.
      operationId: userLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        200:
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                required:
                  - profile_id
                  - token
                properties:
                  profile_id:
                    type: string
                    format: uuid
                  token:
                    type: string
                    description: JWT authentication token
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /location/list:
    get:
      summary: Get location list
      description: Get location list
      operationId: locationList
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - locations
                properties:
                  locations:
                    type: array
                    items:
                      type: object
                      required:
                        - locationId
                        - name
                      properties:
                        locationId:
                          type: integer
                        name:
                          type: string
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
components:
  schemas:
    development:
      type: object
      required:
        - id
        - name
        - coords
        - imageUrl
        - description
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        coords:
          type: object
          required:
            - lat
            - lon
          properties:
            lat:
              type: number
            lon:
              type: number
        imageUrl:
          type: string
        description:
          type: string
        isFavorite:
          type: boolean
    selectionForm:
      type: object
      required:
        - location_id
        - w_bus_stop
        - w_hospital
        - w_kindergarten
        - w_school
        - w_shop
        - w_sport
      properties:
        location_id:
          type: integer
        w_hospital:
          type: integer
          minimum: 0
          maximum: 10
        w_sport:
          type: integer
          minimum: 0
          maximum: 10
        w_shop:
          type: integer
          minimum: 0
          maximum: 10
        w_kindergarten:
          type: integer
          minimum: 0
          maximum: 10
        w_bus_stop:
          type: integer
          minimum: 0
          maximum: 10
        w_school:
          type: integer
          minimum: 0
          maximum: 10
    error:
      type: object
      required:
        - status
        - error
      properties:
        status:
          type: string
          enum:
            - not-found
            - bad-request
            - internal-error
            - unauthorized
        error:
          description: Ошибка
          type: object
          required:
            - code
            - message
          properties:
            code:
              description: Код ошибки
              type: integer
            message:
              description: Сообщение об ошибке
              type: string